rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // General rule: All authenticated users can read/write (fixes permission-denied)
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // Allow admins full access
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Profiles: All authenticated users can read profiles for messaging
    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId || 
        isAdmin()
      );
    }

    // Events: Only alumni can write, all auth users can read
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'alumni';
    }

    // Ratings: All auth users can create/read
    match /ratings/{ratingId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
    }

    // Mentorship requests: Only involved users can read/update
    match /mentorship_requests/{requestId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null &&
        (request.auth.uid == resource.data.studentId || request.auth.uid == resource.data.mentorId);
    }

    // Test: All auth users can read/write
    match /test/{document} {
      allow read, write: if request.auth != null;
    }

    // Conversations: Only participants can read/write
    match /conversations/{conversationId} {
      function isParticipant() {
        let uids = conversationId.split('_');
        return request.auth.uid == uids[0] || request.auth.uid == uids[1];
      }
      allow read, write: if isParticipant();

      match /messages/{messageId} {
        allow read, write: if isParticipant();
        allow delete: if request.auth.uid == resource.data.senderId;
      }
      // Allow typing indicators, lastRead, etc. for participants
      match /{subcollection}/{docId} {
        allow read, write: if isParticipant();
      }
    }

    // Group conversations: All authenticated users can read/write
    match /group_conversations/{groupId} {
      allow read, write: if request.auth != null;
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
        allow delete: if request.auth.uid == resource.data.senderId;
      }
    }

    // Users: Only owner can write, all auth users can read
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Connection Requests: Only sender or recipient can read, only sender can create, only recipient can update
    match /connection_requests/{requestId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.toUserId;
    }

    // Notifications: Only recipient can read, only sender can create, only recipient can update (mark as read)
    match /notifications/{notifId} {
      allow read: if request.auth != null && (
        resource.data.toUserId == request.auth.uid ||
        resource.data.fromUserId == request.auth.uid
      );
      allow delete: if request.auth != null && resource.data.toUserId == request.auth.uid;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.toUserId == request.auth.uid;
    }

    // Reports: All authenticated users can create, only admins can read
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }

    // Admin notifications: Only admins can read/write
    match /adminNotifications/{notifId} {
      allow read, write: if isAdmin();
    }

    // Admin access to all collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Allow admin to read all collections for analytics
    match /mentorship_requests/{requestId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.studentId || 
        request.auth.uid == resource.data.mentorId ||
        isAdmin()
      );
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.studentId || request.auth.uid == resource.data.mentorId);
    }

    // Allow admin to read activity logs and resource views
    match /activity_logs/{logId} {
      allow read, write: if request.auth != null;
    }

    match /resource_views/{viewId} {
      allow read, write: if request.auth != null;
    }

    // User Privacy Settings: Only the user can read/write their own privacy settings
    match /user_privacy/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Video Meetings: All authenticated users can create and read meetings
    match /meetings/{meetingId} {
      allow create, read, write: if request.auth != null;
      
      // Meeting signaling (WebRTC) - allow all authenticated users
      match /signaling/{signalId} {
        allow create, read, write: if request.auth != null;
      }
      
      // Meeting messages - allow all authenticated users
      match /messages/{messageId} {
        allow create, read, write: if request.auth != null;
      }
    }

    // Meeting Invitations: All authenticated users can create and read invitations
    match /meeting_invitations/{invitationId} {
      allow create, read, write: if request.auth != null;
    }
  }
}